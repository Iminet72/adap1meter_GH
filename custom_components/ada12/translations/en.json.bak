<!DOCTYPE html>
<html lang="hu">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Push Notification Demo</title>
</head>
<body>
  <h1>Push Notification Demo</h1>
  <script>
    // Segédfüggvény: az applicationServerKey megfelelő formátumúvá alakítása
    function urlBase64ToUint8Array(base64String) {
      const padding = '='.repeat((4 - base64String.length % 4) % 4);
      const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
      const rawData = window.atob(base64);
      const outputArray = new Uint8Array(rawData.length);

      for (let i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
      }
      return outputArray;
    }

    // Service Worker regisztrálása
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/sw.js').then(registration => {
        console.log('Service Worker regisztrálva:', registration);

        // Értesítési engedély kérése
        Notification.requestPermission().then(permission => {
          if (permission === 'granted') {
            subscribeUserToPush(registration);
          } else {
            console.error('Értesítési engedély megtagadva');
          }
        });
      });
    }

    // Feliratkozás az értesítésekre
    async function subscribeUserToPush(registration) {
      const applicationServerKey = urlBase64ToUint8Array(
        'BNU805r4kNLLwSBUIu4WbyuXV1bhmplvnXlHoqLvsKDjeQaUDM46qWKuQsyg3vgfiJajhiqRz88swlhSwKtfruk'
      );

      const subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey
      });

      // Elküldjük a szervernek az előfizetést
      await fetch('https://greenhess.com:3000/subscribe', {
        method: 'POST',
        body: JSON.stringify(subscription),
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }
  </script>
</body>
</html>
